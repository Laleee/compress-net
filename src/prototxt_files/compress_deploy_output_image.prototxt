name: "Compress_net"
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param {shape: {dim: 1 dim: 3 dim: 28 dim: 28}}
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 8
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig1en"
  type: "Sigmoid"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 4
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2en"
  type: "Sigmoid"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "ip1encode"
  type: "InnerProduct"
  bottom: "conv2"
  top: "ip1encode"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 250
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "ip1encode"
  top: "ip1encode"
}
layer {
  name: "ip2encode"
  type: "InnerProduct"
  bottom: "ip1encode"
  top: "ip2encode"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 200
    weight_filler { type: "gaussian" std: 1 sparse: 10 }
    bias_filler { type: "constant" }
  }
}
# --------- decoding part ---------
layer {
  name: "ip1decode"
  type: "InnerProduct"
  bottom: "ip2encode"
  top: "ip1decode"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 250
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3de"
  type: "Sigmoid"
  bottom: "ip1decode"
  top: "ip1decode"
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "ip1decode"
  top: "ip1decodesh"
  reshape_param { shape { dim: 0 dim: 0 dim: 1 dim: 1 }}
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "ip1decodesh"
  top: "deconv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 4
    kernel_size: 12
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2de"
  type: "Sigmoid"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv1"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 3
    kernel_size: 17
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
#layer {
#  name: "deconv0"
#  type: "Deconvolution"
#  bottom: "deconv1"
#  top: "deconv0"
#  param {
#	lr_mult: 1	  
#  }
#  param {
#	lr_mult: 3	  
#  }
#  convolution_param {
#    num_output: 1
#    kernel_size: 212
#    stride: 1
#    weight_filler { type: "xavier" }
#    bias_filler { type: "constant" }
#  }
#}
#layer {
#  name: "accuracy"
#  type: "Accuracy"
#  bottom: "deconv0"
#  bottom: "image"
#  top: "accuracy"
#  include {
#    phase: TEST
#  }
#}
#layer {
#  name: "loss"
#  type: "MultinomialLogisticLoss"
#  bottom: "deconv0"
#  bottom: "image"
#  top: "loss"
#}
layer {
  name: "sig1de"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1"
}
# -- convert back to 784 elements --
layer {
  name: "deconv1neur"
  type: "Deconvolution"
  bottom: "deconv1"
  top: "deconv1neur"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 3
    kernel_size: 1
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
