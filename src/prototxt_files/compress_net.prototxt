name: "Compress_net"
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  transform_param {
    crop_size: 227
    mean_file: "../../build/train_mean.binaryproto"
  }
  data_param {
  	backend: LMDB
    source: "../../build/train_lmdb"
    batch_size: 1
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  transform_param {
    crop_size: 227
    mean_file: "../../build/val_mean.binaryproto"
  }
  data_param {
  	backend: LMDB
    source: "../../build/val_lmdb"
    batch_size: 1
  }
}
layer {
  name: "conv1p"
  type: "Convolution"
  bottom: "data"
  top: "conv1p"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 8
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig1en"
  type: "Sigmoid"
  bottom: "conv1p"
  top: "conv1p"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1p"
  top: "conv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 4
    kernel_size: 9
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2en"
  type: "Sigmoid"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "ip1encodep"
  type: "InnerProduct"
  bottom: "conv2"
  top: "ip1encodep"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 256
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "ip1encodep"
  top: "ip1encodep"
}
layer {
  name: "ip2encodep"
  type: "InnerProduct"
  bottom: "ip1encodep"
  top: "ip2encodep"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 256
    weight_filler { type: "gaussian" std: 1 sparse: 10 }
    bias_filler { type: "constant" }
  }
}
# --------- decoding part ---------
layer {
  name: "ip1decodep"
  type: "InnerProduct"
  bottom: "ip2encodep"
  top: "ip1decodep"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  inner_product_param {
    num_output: 256
    weight_filler { type: "gaussian" std: 1 sparse: 25 }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3de"
  type: "Sigmoid"
  bottom: "ip1decodep"
  top: "ip1decodep"
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "ip1decodep"
  top: "ip1decodesh"
  reshape_param { shape { dim: 0 dim: 0 dim: 1 dim: 1 }}
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "ip1decodesh"
  top: "deconv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 4
    kernel_size: 12
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2de"
  type: "Sigmoid"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "deconv1p"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv1p"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 3
    kernel_size: 17
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig1de"
  type: "Sigmoid"
  bottom: "deconv1p"
  top: "deconv1p"
}
# -- convert back to 784 elements --
layer {
  name: "deconv1neurp"
  type: "Deconvolution"
  bottom: "deconv1p"
  top: "deconv1neurp"
  param {
	lr_mult: 1
  }
  param {
	lr_mult: 3
  }
  convolution_param {
    num_output: 3
    kernel_size: 11
    stride: 8
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
# --------- calculate loss ---------
layer {
	name: "eucl_loss"
	type: "EuclideanLoss"
	bottom: "deconv1neurp"
	bottom: "data"
	loss_weight: 1
}
