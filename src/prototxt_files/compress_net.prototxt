name: "Compress_net"
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  transform_param {
    crop_size: 227
    mean_file: "../../build/train_mean.binaryproto"
  }
  data_param {
  	backend: LMDB
    source: "../../build/train_lmdb"
    batch_size: 3
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  transform_param {
    crop_size: 227
    mean_file: "../../build/val_mean.binaryproto"
  }
  data_param {
  	backend: LMDB
    source: "../../build/val_lmdb"
    batch_size: 3
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig1en"
  type: "Sigmoid"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 256
    kernel_size: 5
	pad: 2
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2en"
  type: "Sigmoid"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2"
  top: "conv3"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 256
    kernel_size: 55
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3en"
  type: "Sigmoid"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "conv3"
  top: "sig3en_reshaped"
  reshape_param { shape { dim: 0 dim: 0 dim: 1 dim: 1 }}
}
layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "sig3en_reshaped"
  top: "deconv3"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 256
    kernel_size: 55
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig3de"
  type: "Sigmoid"
  bottom: "deconv3"
  top: "deconv3"
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "deconv3"
  top: "deconv2"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 96
    kernel_size: 5
    stride: 1
	pad: 2
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig2de"
  type: "Sigmoid"
  bottom: "deconv2"
  top: "deconv2"
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv1"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 3
    kernel_size: 11
    stride: 4
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
layer {
  name: "sig1de"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1"
}
# -- convert back to 784 elements --
layer {
  name: "deconv1neur"
  type: "Deconvolution"
  bottom: "deconv1"
  top: "deconv1neur"
  param {
	lr_mult: 1	  
  }
  param {
	lr_mult: 3	  
  }
  convolution_param {
    num_output: 3
    kernel_size: 1
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" }
  }
}
# --------- calculate loss ---------
layer {
  name: "sigm_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "deconv1neur"
  bottom: "data"
  top: "cross_entropy_loss"
  loss_weight: 1
}
layer {
  name: "sigDeconv1neur"
  type: "Sigmoid"
  bottom: "deconv1neur"
  top: "sigDeconv1neur"
}
layer {
  name: "eucl_loss"
  type: "EuclideanLoss"
  bottom: "data"
  bottom: "sigDeconv1neur"
  top: "l2_error"
  loss_weight: 0
}
